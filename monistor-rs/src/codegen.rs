// This code was autogenerated with `dbus-codegen-rust --client nonblock --methodtype None -i org.gnome`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait MutterDisplayConfig {
    fn get_resources(
        &self,
    ) -> nonblock::MethodReply<(
        u32,
        Vec<(
            u32,
            i64,
            i32,
            i32,
            i32,
            i32,
            i32,
            u32,
            Vec<u32>,
            arg::PropMap,
        )>,
        Vec<(
            u32,
            i64,
            i32,
            Vec<u32>,
            String,
            Vec<u32>,
            Vec<u32>,
            arg::PropMap,
        )>,
        Vec<(u32, i64, u32, u32, f64, u32)>,
        i32,
        i32,
    )>;
    fn apply_configuration(
        &self,
        serial: u32,
        persistent: bool,
        crtcs: Vec<(u32, i32, i32, i32, u32, Vec<u32>, arg::PropMap)>,
        outputs: Vec<(u32, arg::PropMap)>,
    ) -> nonblock::MethodReply<()>;
    fn change_backlight(&self, serial: u32, output: u32, value: i32) -> nonblock::MethodReply<i32>;
    fn get_crtc_gamma(
        &self,
        serial: u32,
        crtc: u32,
    ) -> nonblock::MethodReply<(Vec<u16>, Vec<u16>, Vec<u16>)>;
    fn set_crtc_gamma(
        &self,
        serial: u32,
        crtc: u32,
        red: Vec<u16>,
        green: Vec<u16>,
        blue: Vec<u16>,
    ) -> nonblock::MethodReply<()>;
    fn get_current_state(
        &self,
    ) -> nonblock::MethodReply<(
        u32,
        Vec<(
            (String, String, String, String),
            Vec<(String, i32, i32, f64, f64, Vec<f64>, arg::PropMap)>,
            arg::PropMap,
        )>,
        Vec<(
            i32,
            i32,
            f64,
            u32,
            bool,
            Vec<(String, String, String, String)>,
            arg::PropMap,
        )>,
        arg::PropMap,
    )>;
    fn apply_monitors_config(
        &self,
        serial: u32,
        method: u32,
        logical_monitors: Vec<(
            i32,
            i32,
            f64,
            u32,
            bool,
            Vec<(String, String, arg::PropMap)>,
        )>,
        properties: arg::PropMap,
    ) -> nonblock::MethodReply<()>;
    fn set_output_ctm(
        &self,
        serial: u32,
        output: u32,
        ctm: (u64, u64, u64, u64, u64, u64, u64, u64, u64),
    ) -> nonblock::MethodReply<()>;
    fn power_save_mode(&self) -> nonblock::MethodReply<i32>;
    fn set_power_save_mode(&self, value: i32) -> nonblock::MethodReply<()>;
    fn panel_orientation_managed(&self) -> nonblock::MethodReply<bool>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> MutterDisplayConfig
    for nonblock::Proxy<'a, C>
{
    fn get_resources(
        &self,
    ) -> nonblock::MethodReply<(
        u32,
        Vec<(
            u32,
            i64,
            i32,
            i32,
            i32,
            i32,
            i32,
            u32,
            Vec<u32>,
            arg::PropMap,
        )>,
        Vec<(
            u32,
            i64,
            i32,
            Vec<u32>,
            String,
            Vec<u32>,
            Vec<u32>,
            arg::PropMap,
        )>,
        Vec<(u32, i64, u32, u32, f64, u32)>,
        i32,
        i32,
    )> {
        self.method_call("org.gnome.Mutter.DisplayConfig", "GetResources", ())
    }

    fn apply_configuration(
        &self,
        serial: u32,
        persistent: bool,
        crtcs: Vec<(u32, i32, i32, i32, u32, Vec<u32>, arg::PropMap)>,
        outputs: Vec<(u32, arg::PropMap)>,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.gnome.Mutter.DisplayConfig",
            "ApplyConfiguration",
            (serial, persistent, crtcs, outputs),
        )
    }

    fn change_backlight(&self, serial: u32, output: u32, value: i32) -> nonblock::MethodReply<i32> {
        self.method_call(
            "org.gnome.Mutter.DisplayConfig",
            "ChangeBacklight",
            (serial, output, value),
        )
        .and_then(|r: (i32,)| Ok(r.0))
    }

    fn get_crtc_gamma(
        &self,
        serial: u32,
        crtc: u32,
    ) -> nonblock::MethodReply<(Vec<u16>, Vec<u16>, Vec<u16>)> {
        self.method_call(
            "org.gnome.Mutter.DisplayConfig",
            "GetCrtcGamma",
            (serial, crtc),
        )
    }

    fn set_crtc_gamma(
        &self,
        serial: u32,
        crtc: u32,
        red: Vec<u16>,
        green: Vec<u16>,
        blue: Vec<u16>,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.gnome.Mutter.DisplayConfig",
            "SetCrtcGamma",
            (serial, crtc, red, green, blue),
        )
    }

    fn get_current_state(
        &self,
    ) -> nonblock::MethodReply<(
        u32,
        Vec<(
            (String, String, String, String),
            Vec<(String, i32, i32, f64, f64, Vec<f64>, arg::PropMap)>,
            arg::PropMap,
        )>,
        Vec<(
            i32,
            i32,
            f64,
            u32,
            bool,
            Vec<(String, String, String, String)>,
            arg::PropMap,
        )>,
        arg::PropMap,
    )> {
        self.method_call("org.gnome.Mutter.DisplayConfig", "GetCurrentState", ())
    }

    fn apply_monitors_config(
        &self,
        serial: u32,
        method: u32,
        logical_monitors: Vec<(
            i32,
            i32,
            f64,
            u32,
            bool,
            Vec<(String, String, arg::PropMap)>,
        )>,
        properties: arg::PropMap,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.gnome.Mutter.DisplayConfig",
            "ApplyMonitorsConfig",
            (serial, method, logical_monitors, properties),
        )
    }

    fn set_output_ctm(
        &self,
        serial: u32,
        output: u32,
        ctm: (u64, u64, u64, u64, u64, u64, u64, u64, u64),
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.gnome.Mutter.DisplayConfig",
            "SetOutputCTM",
            (serial, output, ctm),
        )
    }

    fn power_save_mode(&self) -> nonblock::MethodReply<i32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.gnome.Mutter.DisplayConfig",
            "PowerSaveMode",
        )
    }

    fn panel_orientation_managed(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.gnome.Mutter.DisplayConfig",
            "PanelOrientationManaged",
        )
    }

    fn set_power_save_mode(&self, value: i32) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.gnome.Mutter.DisplayConfig",
            "PowerSaveMode",
            value,
        )
    }
}

#[derive(Debug)]
pub struct MutterDisplayConfigMonitorsChanged {}

impl arg::AppendAll for MutterDisplayConfigMonitorsChanged {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for MutterDisplayConfigMonitorsChanged {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(MutterDisplayConfigMonitorsChanged {})
    }
}

impl dbus::message::SignalArgs for MutterDisplayConfigMonitorsChanged {
    const NAME: &'static str = "MonitorsChanged";
    const INTERFACE: &'static str = "org.gnome.Mutter.DisplayConfig";
}
